# -*- coding: utf-8 -*-
"""big-data-cve.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1enYwJXlhBhr5uV5TErYAvWW2Szt1n2zU
"""

!apt-get -y install openjdk-8-jdk-headless
!wget http://apache.osuosl.org/spark/spark-2.4.0/spark-2.4.0-bin-hadoop2.7.tgz
!tar xf spark-2.4.0-bin-hadoop2.7.tgz
!pip install findspark kaggle

import os

# setup environment variables
os.environ["JAVA_HOME"] = '/usr/lib/jvm/java-8-openjdk-amd64'
os.environ["SPARK_HOME"] = '/content/spark-2.4.0-bin-hadoop2.7'
os.environ['KAGGLE_USERNAME'] = 'ronaldsumbayak'
os.environ['KAGGLE_KEY'] = '771009dffffa0cd0883d5fb98594d756'

# download dataset
!kaggle datasets download -d kmader/aminer-academic-citation-dataset
!unzip aminer-academic-citation-dataset.zip -d data

import findspark
findspark.init()

from pyspark.sql import SparkSession, functions as F

spark = SparkSession.builder.master('local[*]').getOrCreate()

from functools import reduce
dblp_refs = ['data/dblp-ref-0.json',
             'data/dblp-ref-1.json',
             'data/dblp-ref-2.json',
             'data/dblp-ref-3.json']
df = reduce(lambda x, f: f.union(x), map(spark.read.json, dblp_refs))

df.count()

df.show()

# Jumlah paper per tahun

paper_count_per_year = df.groupBy('year') \
                         .count() \
                         .orderBy('year', ascending=False)

paper_count_per_year.show()

paper_count_per_year.toPandas() \
                    .plot(x='year',
                          y='count',
                          title='Number of paper per year')

# Rata-rata jumlah citation untuk tiap paper

n_citation_avg = df.agg(F.avg('n_citation'))

print('Average number of citation per paper:',
      int(n_citation_avg.collect()[0][0]))

# Venue / Conference dengan jumlah paper terbanyak per tahun

# grouped by year and venue
yv = df.groupBy('year', 'venue') \
       .count() \
       .where('venue != ""')

# year and venue group aggregated by maximum row
ym = df.groupBy('year', 'venue') \
       .count() \
       .where('venue != ""') \
       .groupBy('year') \
       .agg(F.max('count').alias('count'))

# maximum year and venue group with venue column
most_venue_per_year =\
    ym.join(yv, ['year', 'count'], 'left') \
      .orderBy('year', ascending=False)

most_venue_per_year.show()

print('Venue / Conference with most paper for each year\n')
for row in most_venue_per_year.collect():
    print('{0}: {2} ({1} papers)'.format(*row))